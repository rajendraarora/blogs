I"m;<h1 id="channel">Channel</h1>

<p>A channel is a communication technique which allows a Goroutine to communicate with another Goroutine.
<br /><br /></p>

<p><img src="/assets/img/channel.png" alt="Channel" /></p>

<p><br /></p>

<p>You may notice the “main routine” in above screenshot. As soon as the main routine run of code to execute. The entire program will quit even the other child routine is running.</p>

<p><br /></p>

<p><img src="/assets/img/channel2.png" alt="main routine" /></p>

<p><br /></p>

<p><strong>Declaration</strong></p>

<p>We can declare channel by writing the following syntax:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">var</span> <span class="n">channel_name</span> <span class="k">chan</span> <span class="n">Type</span></code></pre></figure>

<p>Or We can use a shorthand declaration with a builtin <code class="language-plaintext highlighter-rouge">make()</code> function:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">channel_name</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">)</span></code></pre></figure>

<p><br /></p>

<p>Let’s see some basic example:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">var</span> <span class="n">channelName</span> <span class="k">chan</span> <span class="kt">int</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Value of the channel: "</span><span class="p">,</span> <span class="n">channelName</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Type of the channel: %T"</span><span class="p">,</span> <span class="n">channelName</span><span class="p">)</span>

	<span class="n">channelName1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">)</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Value of the channel: "</span><span class="p">,</span> <span class="n">channelName1</span><span class="p">)</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span><span class="s">"Type of the channel: %T"</span><span class="p">,</span> <span class="n">channelName1</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>The following output will be:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Value of the channel:  &lt;nil&gt;</span>
<span class="c">// Type of the channel: chan int</span>
<span class="c">// Value of the channel:  0xc0000160c0</span>
<span class="c">// Type of the channel: chan int</span></code></pre></figure>

<p><br /></p>

<p><strong>How to send data with channel?</strong></p>

<p><br /></p>

<p><img src="/assets/img/channel3.png" alt="Sending data with channel" /></p>

<p><br /></p>

<ul>
  <li>Here <code class="language-plaintext highlighter-rouge">5</code> is the value as input which we are sending through channel with the syntax <code class="language-plaintext highlighter-rouge">channel &lt;- 5</code></li>
  <li>We can receive the value out of channel (For e.g: when you receive text message and you read it via phone) with the syntax <code class="language-plaintext highlighter-rouge">myNumber &lt;- channel</code></li>
  <li>To log the channel value <code class="language-plaintext highlighter-rouge">fmt.Println(&lt;- channel)</code></li>
</ul>

<p><br /></p>

<p>Let’s have a quick at this simple channel program:</p>

<p><br /></p>

<p>This program will sum up through channel:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Start main function"</span><span class="p">)</span>

	<span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">int</span><span class="p">)</span>

	<span class="k">go</span> <span class="n">sumValue</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

	<span class="n">ch</span> <span class="o">&lt;-</span> <span class="m">5</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"End main function"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">sumValue</span><span class="p">(</span><span class="n">num</span> <span class="k">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="m">5</span> <span class="o">+</span> <span class="o">&lt;-</span><span class="n">num</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Output:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Start main function</span>
<span class="c">// 10</span>
<span class="c">// End main function</span></code></pre></figure>

<p><br /></p>

<p>Another simple channel example with greet message:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Start main function"</span><span class="p">)</span>

	<span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">)</span>

	<span class="k">go</span> <span class="n">greetMsg</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

	<span class="n">ch</span> <span class="o">&lt;-</span> <span class="s">"world"</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"End main function"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">greetMsg</span><span class="p">(</span><span class="n">ch</span> <span class="k">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Hello"</span><span class="p">,</span> <span class="o">&lt;-</span><span class="n">ch</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Output:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Start main function</span>
<span class="c">// Hello world</span>
<span class="c">// End main function</span></code></pre></figure>

<p><br /></p>

<p>Let’s have a quick another look at this simple channel program:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>

   <span class="c">// syntax for channel</span>
   <span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">)</span>

   <span class="n">ch</span> <span class="o">&lt;-</span> <span class="s">"this is my msg 1"</span>
   <span class="n">ch</span> <span class="o">&lt;-</span> <span class="s">"this is my msg 2"</span>
   <span class="n">ch</span> <span class="o">&lt;-</span> <span class="s">"this is my msg 3"</span>
   <span class="n">ch</span> <span class="o">&lt;-</span> <span class="s">"this is my msg 4"</span>

   <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="n">ch</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>Here our channel is unbuffered (we didn’t specify any buffer size when make()ing the channel) meaning that they will only accept sends (channel &lt;-) if there is a corresponding receive () ready to receive the sent value. So in this case ‘ch’ is an unbuffered channel and we are attempting to send onto it,
but there is no receiver of this channel.</p>

<p>We can fix it by either making the channel buffered or registering a receiver on this channel in another go routine.</p>

<p>So we might see some out error:
fatal error: all goroutines are asleep - deadlock!</p>

<p><br /></p>

<p>To avoid this error, we can specify the buffer size:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span></code></pre></figure>

<p>We won’t see error here anymore after specifying the buffer size.</p>

<p><br /></p>

<p><strong>Close() function</strong></p>

<p>We can close the channel with builtin <code class="language-plaintext highlighter-rouge">close()</code> function. This sets the response with <code class="language-plaintext highlighter-rouge">true/false</code> value to indicate no more value will be send to the channels.</p>

<p><br /></p>

<p>Open or close channel value can be checked with the following syntax:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="n">res</span><span class="p">,</span> <span class="n">status</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">ch</span></code></pre></figure>

<p><br /></p>

<p>Let’s try with one example to check the close function:</p>

<p><br /></p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
	<span class="s">"fmt"</span>
	<span class="s">"strconv"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">/* Creating a channel */</span>
	<span class="n">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="k">chan</span> <span class="kt">string</span><span class="p">)</span>

	<span class="c">/* Calling Gorouting */</span>
	<span class="k">go</span> <span class="n">goRoutineFun</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

	<span class="c">/*
		when the value of "status"
		receives as "true" that means
		channel is open and it can send and receive data.

		When the value of "status" receives as "false" means
		channel is closed.
	*/</span>
	<span class="k">for</span> <span class="p">{</span>
		<span class="n">res</span><span class="p">,</span> <span class="n">status</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="n">ch</span>

		<span class="k">if</span> <span class="n">status</span> <span class="o">==</span> <span class="no">false</span> <span class="p">{</span>
			<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Channel is closed:"</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"Channel is opened with response:"</span><span class="p">,</span> <span class="n">res</span><span class="p">,</span> <span class="s">"and status:"</span><span class="p">,</span> <span class="n">status</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">goRoutineFun</span><span class="p">(</span><span class="n">ch</span> <span class="k">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="c">/* This is how we concat the iterated loop value with string */</span>
		<span class="n">msg</span> <span class="o">:=</span> <span class="s">"Channel message "</span> <span class="o">+</span> <span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
		<span class="n">ch</span> <span class="o">&lt;-</span> <span class="n">msg</span>
	<span class="p">}</span>

	<span class="c">/* Using close() function to close the channel */</span>
	<span class="nb">close</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>We will see the following output:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Channel is opened with response: Channel message 0 and status: true</span>
<span class="c">// Channel is opened with response: Channel message 1 and status: true</span>
<span class="c">// Channel is opened with response: Channel message 2 and status: true</span>
<span class="c">// Channel is opened with response: Channel message 3 and status: true</span>
<span class="c">// Channel is opened with response: Channel message 4 and status: true</span>
<span class="c">// Channel is closed: false</span></code></pre></figure>

<p><br /></p>

<p>Hope my contribution will help you to understand this topic. Please feel free to reach out to me on twitter <a href="https://twitter.com/rajendraarora16">@rajendraarora16</a> for any queries.</p>
:ET