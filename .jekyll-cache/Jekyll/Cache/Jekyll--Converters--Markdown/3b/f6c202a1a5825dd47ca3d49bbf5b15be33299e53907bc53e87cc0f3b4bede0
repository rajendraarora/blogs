I"(<h1 id="goroutines">Goroutines</h1>

<p>A Goroutine is a lightweight thread managed by the Go runtime. A Goroutine is a function or method which executes independently and simultaneously in a connection with any other Goroutine present in our program.
<br /></p>

<p>In other word, Goroutines are functions/methods that run concurrently with other functions/methods.</p>

<h1 id="how-to-create-a-goroutines">How to create a Goroutines?</h1>

<p>We can create our own Goroutine by simply using <code class="language-plaintext highlighter-rouge">go</code> keyword as prefex to the function or method.</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">go</span> <span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">)</span></code></pre></figure>

<p><code class="language-plaintext highlighter-rouge">f(x, y, z)</code> will start new goroutine runnning.</p>

<p><br /></p>

<p>I will go over basics to a complex example to understand more on examples. So let’s start with basics..</p>

<p><br /></p>

<p>Let’s assume we have this</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="s">"fmt"</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">displayGreetMsg</span><span class="p">(</span><span class="s">"Welcome"</span><span class="p">)</span> 
	<span class="n">displayGreetMsg</span><span class="p">(</span><span class="s">"Raj Arora"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">displayGreetMsg</span><span class="p">(</span><span class="n">str</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As you can see, it will return the following output:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Welcome</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span>
<span class="c">// Raj Arora</span></code></pre></figure>

:ET